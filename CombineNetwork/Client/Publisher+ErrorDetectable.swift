/// Detect different kind of API errors in a publisher.
///
/// - version: 1.0.0
/// - date: 20/11/22
/// - author: Adamas
internal extension Publisher where Output == DataTaskResponse {
    
    /// Map a URLError generated by DataTaskPublisher into an APIError.
    ///
    ///  - returns: The publisher that has the mapped error
    func detectNetworkError() -> AnyPublisher<DataTaskResponse, APIError> where Failure == URLError {
        mapError { error in
            let networkError = NetworkError(error: error)
            return APIError.network(networkError)
        }
        .eraseToAnyPublisher()
    }

    /// Catch BusinessErrors from the response
    ///
    /// - Parameter businessErrorTypes: A list of BusinessError.Type
    /// - Returns: A new publisher filtered out BusinessErrors
    func detectBusinessError(in businessErrorTypes: [any BusinessError.Type]) -> AnyPublisher<DataTaskResponse, APIError> where Failure == APIError {
        tryMap { response in
            let businessErrors = businessErrorTypes.compactMap { $0.init(response: response) }
            if let businessError = businessErrors.first {
                throw APIError.business(businessError)
            } else {
                return response
            }
        }
        .mapError(into: APIError.other)
    }

    /// Catch ServerErrors form the status code
    ///
    /// - Returns: A new publisher filtered out ServerErrors
    func detectServerError() -> AnyPublisher<DataTaskResponse, APIError> where Failure == APIError {
        tryMap { response in
            guard let httpResponse = response.response as? HTTPURLResponse else {
                throw APIError.other
            }
            if let httpError = HTTPError(statusCode: httpResponse.statusCode) {
                throw APIError.http(httpError)
            }
            return response
        }
        .mapError(into: APIError.other)
    }
}

import Combine
import Foundation
import CombineUtility
